name: Deploy Discord Bot

on:
  push:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'develop'
        type: string

env:
  AWS_REGION: ap-northeast-2

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    # OIDC 권한 설정
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-DeployDiscordBot
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy via SSM Run Command
        id: deploy
        run: |
          BRANCH="${{ github.event.inputs.branch || 'develop' }}"
          
          echo "Deploying discord-bot (branch: $BRANCH) to EC2..."
          
          # 사전 확인: EC2 인스턴스 상태
          echo "Checking EC2 instance status..."
          aws ec2 describe-instances \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --query 'Reservations[0].Instances[0].State.Name' \
            --output text
          
          # 사전 확인: SSM Document 존재 여부 및 최신 버전 확인
          echo "Checking SSM Document..."
          DOCUMENT_STATUS=$(aws ssm describe-document \
            --name "KookminFeed-DeployApplication" \
            --query 'Document.Status' \
            --output text)
          
          echo "Document Status: $DOCUMENT_STATUS"
          
          # 최신 버전 가져오기
          echo "Getting latest document version..."
          LATEST_VERSION=$(aws ssm describe-document \
            --name "KookminFeed-DeployApplication" \
            --query 'Document.LatestVersion' \
            --output text)
          
          echo "Latest Document Version: $LATEST_VERSION"
          DOCUMENT_NAME="KookminFeed-DeployApplication"  # 버전 명시하지 않음 (자동으로 최신 버전 사용)
          
          # SSM 명령 실행
          echo "Sending SSM command with document: $DOCUMENT_NAME (latest version: $LATEST_VERSION)"
          set -e  # 오류 발생 시 스크립트 중단
          
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "$DOCUMENT_NAME" \
            --parameters "service=discord-bot,branch=$BRANCH" \
            --query 'Command.CommandId' \
            --output text 2>&1)
          
          # COMMAND_ID 검증
          if [ -z "$COMMAND_ID" ] || [ "$COMMAND_ID" = "None" ]; then
            echo "❌ Failed to get Command ID from SSM send-command"
            echo "COMMAND_ID value: '$COMMAND_ID'"
            exit 1
          fi
          
          echo "✅ Command ID: $COMMAND_ID"
          echo "command_id=$COMMAND_ID" >> $GITHUB_OUTPUT
          
          # Wait for command completion
          echo "Waiting for deployment to complete..."
          aws ssm wait command-executed \
            --command-id "$COMMAND_ID" \
            --instance-id "${{ secrets.EC2_INSTANCE_ID }}"
      
      - name: Get deployment result
        run: |
          COMMAND_ID="${{ steps.deploy.outputs.command_id }}"
          
          echo "Getting deployment result..."
          RESULT=$(aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
            --query 'Status' \
            --output text)
          
          echo "Deployment status: $RESULT"
          
          if [ "$RESULT" = "Success" ]; then
            echo "✅ Deployment completed successfully!"
          else
            echo "❌ Deployment failed!"
            # Get error details
            aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
              --query 'StandardErrorContent' \
              --output text
            exit 1
          fi
      
      - name: Get deployment logs
        if: always()
        run: |
          COMMAND_ID="${{ steps.deploy.outputs.command_id }}"
          
          echo "=== Deployment Logs ==="
          aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
            --query 'StandardOutputContent' \
            --output text
